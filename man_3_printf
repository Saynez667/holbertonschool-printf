NAME
       _printf - formatted output conversion

SYNOPSIS
       #include "main.h"

       int _printf(const char *format, ...);

DESCRIPTION
       The _printf() function produces output according to a format as described
       below. The function writes output to stdout, the standard output stream.

       This function writes the output under the control of a format string that
       specifies how subsequent arguments are converted for output.

FORMAT OF THE FORMAT STRING
       The format string is a character string, beginning and ending in its
       initial shift state, if any. The format string is composed of zero or
       more directives: ordinary characters (not %), which are copied unchanged
       to the output stream; and conversion specifications, each of which
       results in fetching zero or more subsequent arguments.

       Each conversion specification is introduced by the character %, and ends
       with a conversion specifier. In between there may be (in this order) zero
       or more flags, an optional minimum field width, an optional precision and
       an optional length modifier.

       The arguments must correspond properly (after type promotion) with the
       conversion specifier. By default, the arguments are used in the order
       given, where each '*' and each conversion specifier asks for the next
       argument (and it is an error if insufficiently many arguments are given).

CONVERSION SPECIFIERS
       A character that specifies the type of conversion to be applied. The
       conversion specifiers and their meanings are:

       d, i   The int argument is converted to signed decimal notation.

       c      The int argument is converted to an unsigned char, and the
              resulting character is written.

       s      The const char * argument is expected to be a pointer to an array
              of character type (pointer to a string). Characters from the array
              are written up to (but not including) a terminating null byte ('\0').

       %      A '%' is written. No argument is converted. The complete
              conversion specification is '%%'.

RETURN VALUE
       Upon successful return, this function returns the number of characters
       printed (excluding the null byte used to end output to strings).
AUTHORS
       yassin-info
       Saynez667